#!/usr/bin/env python

import datetime
import json
import os
import requests
import subprocess
import sys
import time


API_ENDPOINT = "http://push.si/api"
HASH_FILE_LOCATION = "%s/.PUSHSI_HASH" % os.path.expanduser("~")


class EmptyHashError(Exception):
    pass


class RequestError(Exception):
    def __init__(self, error):
        self.error = error
        super(RequestError, self).__init__(error)


class Pushsi(object):
    def __init__(self, pushsi_hash=None):
        if not pushsi_hash:
            pushsi_hash = self._get_hash()
        self.pushsi_hash = pushsi_hash

    def _make_request(self, endpoint, data=None, request_type='POST'):
        url = '%s/%s' % (API_ENDPOINT, endpoint)
        try:
            if request_type == 'POST':
                response = requests.post(url, data=data)
            elif request_type == 'GET':
                response = requests.get(url, params=data)
            else:
                raise RequestError("Invalid request_type")
        except Exception, e:
            raise RequestError(e)
        if response.status_code != 200:
            response_json = json.loads(response.text)
            raise RequestError(response_json.get('error'))
        return response.json()

    def _get_hash(self):
        # Try to get the hash locally
        try:
            pushsi_hash = None
            with open(HASH_FILE_LOCATION, 'r') as fp:
                pushsi_hash = fp.read()
            if not pushsi_hash:
                raise EmptyHashError()
            return pushsi_hash
        except (IOError, EmptyHashError):
            pass
        # No hash, register for one
        data = self._make_request('computer/register')
        pushsi_hash = data.get('hash')
        if not pushsi_hash:
            raise EmptyHashError("No hash returned from API request!")
        # Save it
        with open(HASH_FILE_LOCATION, 'w') as fp:
            fp.write(pushsi_hash)
        return pushsi_hash

    def register(self, pin_code):
        params = {
            'hash': self.pushsi_hash,
            'pin_code': pin_code,
        }
        self._make_request('pin/resolve', params)

    def status(self):
        params = {'hash': self.pushsi_hash}
        data = self._make_request('computer/status', params, request_type='GET')
        return data.get('phones')

    def pushsi(self, data):
        data['hash'] = self.pushsi_hash
        return self._make_request('push', data)


def usage():
    msg = """Usage: pushsi [options]

Options:
  -h, --help      Show this help message and exit
  -r, --register  Register a phone by entering a pin
  -s, --status    Check the status of this computer - show which phones are
                  hooked up to it
  -v, --verbose   Be extra verbose about the push messages that are sent"""
    print msg


def main():
    pushsi = Pushsi()

    # Note: not using optparse because we don't really want to parse all the args
    # example: pushsi python myscript.py --custom-script-arg
    if len(sys.argv) == 1 or sys.argv[1].lower() in ('-h', '--help'):
        return usage()

    if sys.argv[1].lower() in ('-r', '--register'):
        if len(sys.argv) < 3:
            print "Error: must specify a pin code to register"
            sys.exit(1)
        pin_code = sys.argv[2]
        pushsi.register(pin_code)
        print "Successfully registered this computer!"
        return

    if sys.argv[1].lower() in ('-s', '--status'):
        phones = pushsi.status()
        if not phones:
            print "No phones currently hooked up to this computer."
            return
        print "%i phone%s currently hooked up to this computer:" % (
            len(phones),
            len(phones) != 1 and 's' or '',
        )
        print "Phone UUID:\tRegistered:"
        for phone in phones:
            created = datetime.datetime.fromtimestamp(phone['created'])
            print "%s\t%s" % (phone['phone_uuid'], created)
        return

    pieces = sys.argv[1:]
    verbose = False
    if pieces[1].lower() in ('-v', '--verbose'):
        verbose = True
        pieces = pieces[1:]
    if not pieces:
        print "Error: must specify a command"
        sys.exit(1)
    cmd = " ".join(pieces)

    timestamp = time.time()
    p = subprocess.Popen(cmd, shell=True)
    returncode = p.wait()
    elapsed = time.time() - timestamp

    message = "Command: %s Exit status: %s" % (cmd, returncode)
    params = {
        'message': message,
        'command': cmd,
        'return_code': returncode,
        'elapsed_time_seconds': elapsed
    }
    data = pushsi.pushsi(params)
    if verbose:
        print "%s push message%s sent" % (
            data['messages_sent'],
            int(data['messages_sent']) != 1 and 's' or '',
        )


if __name__ == '__main__':
    main()
